@page "/"

@using kchat.UI.Framework
@using kchat.kafka;
@inject IJSRuntime jsRuntime
@inject MemoryStore _memoryStore;
@inject MessageService _messageService;
@implements IDisposable

@if (_showUserId)
{
    <div class="container-sm">
        <div class="card" style="width: 18rem;">
            <div class="card-body">
                <h5 class="card-title">Enter your name:</h5>
                <input type="text" class="form-text" id="inputUserId" @bind-value="_txtUserId" @onkeyup="@OnEnterKeyUserName" />
                <p class="card-text">Before you can continue, you must enter your username</p>
                <button class="btn-primary" @onclick="SubmitUserId">Submit</button>
            </div>
        </div>
    </div>
}


@if (!_showUserId)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-secondary" role="alert">
                    Welcome back <b>@_txtUserId</b>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <textarea style="width:100%;height:70vh;overflow:scroll; " @bind="_txtareaMessages" readonly></textarea>
            </div>

        </div>

        <div class="row">
            <div class="col-12">
                Message:
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <input id="inputTextMessage" type="text" style="width:100%" @bind-value="_txtMessage" @onkeyup="@OnEnterKeyTextMessage" disabled="@_sendingMessage" />
            </div>
        </div>

        <div class="row">
            <div class="col-2">
                @if (!_sendingMessage)
                {
                    <button class="btn btn-primary" @onclick="SendMessage">Send</button>
                }
                else
                {
                    <button class="btn btn-primary" type="button" disabled>
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="visually-hidden">Sending...</span>
                    </button>
                }
            </div>
        </div>
    </div>
}

@code {

    private string _txtUserId;
    private string _txtMessage;
    private string _txtareaMessages;
    private bool _showUserId = false;
    private bool _sendingMessage = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // focus on the text element
        if (_showUserId)
        {
            await jsRuntime.InvokeVoidAsync("focusInput", "inputUserId");
        }
        else
        {
            await jsRuntime.InvokeVoidAsync("focusInput", "inputTextMessage");
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override Task OnInitializedAsync()
    {
        _messageService.OnNewMessage += OnNewMessage;
        _txtUserId = _memoryStore.Get("UserId");

        // If user has not signed up - first they should sign up.
        if (string.IsNullOrEmpty(_memoryStore.Get("UserId")))
        {

            _showUserId = true;

        }
        else
        {
            _messageService.Initialize(_txtUserId);
        }

        return Task.CompletedTask;
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrEmpty(_txtMessage) || string.IsNullOrEmpty(_txtUserId))
        {
            return;
        }

        _sendingMessage = true;
        await _messageService.SendMessage(_txtUserId, _txtMessage);
        _txtMessage = string.Empty;
        _sendingMessage = false;
    }

    private void OnNewMessage(object sender, ChatMessage chatMessage)
    {
        // Take care to update UI on the right sycnhronization context
        InvokeAsync(() =>
        {
            var message = $"{chatMessage.DateTime.ToString("HH:mm:ss")} {chatMessage.UserId}: {chatMessage.Text}";
            _txtareaMessages += message + Environment.NewLine;
            this.StateHasChanged();
        });


    }

    private void SubmitUserId()
    {
        if (string.IsNullOrEmpty(_txtUserId))
        {
            return;
        }

        _memoryStore.Add("UserId", _txtUserId);
        _showUserId = false;
        _messageService.Initialize(_txtUserId);
    }

    public void Dispose()
    {
        _messageService.OnNewMessage -= OnNewMessage;
    }

    private async Task OnEnterKeyTextMessage(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendMessage();
        }

    }
    private void OnEnterKeyUserName(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SubmitUserId();
        }

    }

}
